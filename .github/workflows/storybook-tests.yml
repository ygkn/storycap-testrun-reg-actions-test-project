name: Storybook Tests
on:
  push:
    branches:
      - main
  pull_request: ~
jobs:
  test:
    env:
      GH_TOKEN: ${{ github.token }}
    timeout-minutes: 60
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pull-requests: write
      actions: write
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: "npm"
      - run: npm ci

      # 実際に動かす場合は ~/.cache/ms-playwright をキャッシュする
      - name: Install Playwright
        run: npx playwright install --with-deps

      # msw を使っている場合は、ここで npx msw init を実行する

      - name: Build Storybook
        run: npm run build-storybook

      - name: Serve Storybook and run tests
        run: |
          npx concurrently -k -s first -n "SB,TEST" -c "magenta,blue" \
            "npx http-server storybook-static --port 6006 --silent" \
            "npx wait-on tcp:6006 && npm run test-storybook"

      - name: Get custom-report-page
        id: get-custom-report-page
        # リポジトリ名が owner/repo の形式でしか取得できないので、bash の文字列置換で取得する
        run: |
          echo "::set-output name=custom-report-page::https://${{ github.repository_owner }}.github.io/$(echo ${{ github.repository }} | cut -d '/' -f 2)/run_${{ github.run_id }}/report.html"


      - uses: reg-viz/reg-actions@v2
        with:
          threshold-rate: 0.001
          github-token: "${{ secrets.GITHUB_TOKEN }}"
          image-directory-path: __screenshots__
          report-file-path: report
          custom-report-page: ${{ steps.get-custom-report-page.outputs.custom-report-page }}


      # GitHub Pages にデプロイするため、別ディレクトリにリポジトリを clone する
      # actions/checkout を使わずに git clone すると、push ができない
      - uses: actions/checkout@v4
        with:
          path: tmp

      - run: |
          pushd ./tmp

          git config user.name ${{ github.actor }}
          git config user.email ${{ github.actor_id }}+${{ github.actor }}@users.noreply.github.com

          # リモートに reg_actions_report ブランチが存在する場合は、checkout する
          if git fetch origin reg_actions_report; then
            git checkout reg_actions_report
          else
            # リモートに reg_actions_report ブランチが存在しない場合は、orphan ブランチを作成する
            git checkout --orphan reg_actions_report
            # orphan ブランチを作成した場合は、checkout前のファイルが残っているため、削除する
            git reset
            git clean -dfx
          fi

          # .nojekyll ファイルが無いと GitHub Pages で `_` から始まるディレクトリが404になる
          :> .nojekyll

          git add .nojekyll

          # 30日以上前のディレクトリを削除する
          find . -maxdepth 1 -type d -name "run_*" -mtime +30 -exec git rm -rf {} \;

          # re-run された場合など、同じ run_id のディレクトリが存在する場合は削除する
          git rm -rf run_${{ github.run_id }} || true

          # 実行結果は、__reg__ ディレクトリに保存されている
          #
          cp -r ../__reg__ run_${{ github.run_id }}

          git add run_${{ github.run_id }}

          git commit -m "Add report for run ${{ github.run_id }}"

          git push origin reg_actions_report

          popd


